1. Handle problems at the appropriate level. (Avoid catching exceptions unless you know what to do with them.)
적절한 수준에서 문제를 다루어라(당신이 무엇을할지 모르는 한 예외를 캐치하는 것을 피하기)

2.Fix the problem and call the method that caused the exception again
문제를 해결하고 문제의 원인이 된 메소드를 다시 호출

3.Patch things up and continue without retrying the method

4.Calculate some alternative result instead of what the method was supposed to produce.
메소드가 내놓는 결과물 대신에 몇몇의 대체적인 결과물을 계산하라

5.Do whatever you can in the current context and rethrow the same exception to a higher context
현재상황에서 당신이 할 수 있는 있은 무엇이지든지 하고
 더 높은 차원(단계)안에서 같은 Exception들은 다시던저라(main 메소드에서 Exception 처리하지 말라는 이야기)
 
6.Do whatever you can in the current context and throw a different exception to a higher context.
현재상황에서 당신이 할 수 있는 있은 무엇이지든지 하고
 더 높은 차원(단계)안에서 다른 Exception들은 던저라(main 메소드에서 Exception 처리하지 말라는 이야기)
 
7. Terminate the program.
프로그램을 종료시켜라

8. Simplify. (If your exception scheme makes things more complicated, then it is painful and annoying to use.)
간소화시켜라 (만약 exception 스키마가 다루고자 하는 것을 더 복잡하게 만든다면
               사용하는 것은 괴롭고 짜증나게 만든다.)
              
9. Make your library and program safer. 라이브러리와 프로그램을 안전하게 만들어라
 (This is a short-term investment for debugging, and a long-term investment for application robustness.)
 이것은 짧은 기간동안 디버깅에 투자하는 것에 대한 것이고 긴 기간 투자는 어플리케이션을 건장하게 한다.
              